import { createSlice, PayloadAction } from '@reduxjs/toolkit';

import { ProductBatch } from '../../api/product-batch/product-batch.gql';
import { RootState } from '../../redux-store';

export interface ProductBatchPageState {
  isSelecting: boolean;
  selectedProductBatches: ProductBatch[];
}

const initialState: ProductBatchPageState = {
  isSelecting: false,
  selectedProductBatches: [],
};

// export const updateProductBatchAsync = createAsyncThunk(
//   'productBatch/update',
//   async (input: MutationUpdateProductBatchArgs['input']) => {
//     return await updateProductBatch(input);
//   },
// );

export const productBatchSlice = createSlice({
  name: 'productBatchPage',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleSelecting: state => {
      state.isSelecting = !state.isSelecting;
    },
    toggleSelect: (state, action: PayloadAction<ProductBatch>) => {
      const index = state.selectedProductBatches.findIndex(
        item => item.id == action.payload.id,
      );
      if (index > -1) {
        state.selectedProductBatches.splice(index, 1);
      } else {
        state.selectedProductBatches.push(action.payload);
      }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
      // builder.addCase(updateProductBatchAsync.fulfilled, (state, action) => {
      //   if (!action.payload) throw new Error('error 1');
      //   // @ts-expect-error
      //   let item = state.items.find(item => item.id === action.payload.id);
      //   if (!item) throw new Error('error 1');
      //   const index = state.items.indexOf(item);
      //   item = { ...item, ...action.payload };
      //   state.items = update(state.items, {
      //     [index]: { $set: item },
      //   });
      // });
    },
  },
});

export const { toggleSelecting, toggleSelect } = productBatchSlice.actions;

export const selectIsSelectingMode = (state: RootState) =>
  state.productBatchPage.isSelecting;

export const selectSelectedProductBatches = (state: RootState) =>
  state.productBatchPage.selectedProductBatches;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     // const currentValue = selectCount(getState());
//     // if (currentValue % 2 === 1) {
//     // dispatch(incrementByAmount(amount));
//     // }
//   };

export default productBatchSlice.reducer;
