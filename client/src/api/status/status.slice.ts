import { arrayMove } from '@dnd-kit/sortable';
import {
  createAsyncThunk,
  createSlice,
  type PayloadAction,
} from '@reduxjs/toolkit';

import { Status, StatusFragment } from '@/gql-types/graphql';
import { type RootState } from '@/redux-store';

import {
  createStatus,
  // deleteStatus,
  fetchStatusList,
  moveStatusMutation,
} from './status.api';

export interface StatusListState {
  statusList: StatusFragment[];
  tempStatusList: StatusFragment[] | null;
  loading: boolean;
  statusInLoadingId: null | number;
}

const initialState: StatusListState = {
  statusList: [],
  tempStatusList: null,
  loading: false,
  statusInLoadingId: null,
};

export const loadStatusListAsync = createAsyncThunk(
  'statusList/load',
  fetchStatusList,
);

export const moveStatusAsync = createAsyncThunk(
  'statusList/move',
  async ({ active, over }: { active: Status; over: Status }) => {
    return moveStatusMutation({ id: active.id, order: over.order });
  },
);
export const createStatusAsync = createAsyncThunk(
  'statusList/create',
  createStatus,
);
// export const deleteStatusAsync = createAsyncThunk(
//   'statusList/delete',
//   deleteStatus,
// );

export const statusSlice = createSlice({
  name: 'status',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: state => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1;
    },
    decrement: state => {
      // state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      // state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(loadStatusListAsync.pending, state => {
        state.loading = true;
      })
      .addCase(loadStatusListAsync.fulfilled, (state, action) => {
        state.statusList = action.payload.toSorted((a, b) => a.order - b.order);
        state.loading = false;
      })
      .addCase(loadStatusListAsync.rejected, state => {
        state.loading = false;
      })

      .addCase(createStatusAsync.pending, state => {
        state.loading = true;
      })
      .addCase(createStatusAsync.fulfilled, (state, action) => {
        state.loading = false;
      })
      .addCase(createStatusAsync.rejected, state => {
        state.loading = false;
      })

      .addCase(moveStatusAsync.pending, (state, action) => {
        const { active, over } = action.meta.arg;
        state.statusInLoadingId = active.id;
        const activeIndex = state.statusList.findIndex(
          item => active.id == item.id,
        );
        const overIndex = state.statusList.findIndex(
          item => over.id == item.id,
        );
        state.tempStatusList = arrayMove(
          state.statusList,
          activeIndex,
          overIndex,
        );

        state.statusInLoadingId = active.id;
      })
      .addCase(moveStatusAsync.fulfilled, (state, action) => {
        (action.payload ?? []).forEach(newItem => {
          state.statusList.forEach((oldItem, index) => {
            if (oldItem.id == newItem.id) {
              state.statusList[index] = newItem;
            }
          });
        });
        state.statusList = state.statusList.toSorted(
          (a, b) => a.order - b.order,
        );
        state.tempStatusList = null;
        state.statusInLoadingId = null;
      })
      .addCase(moveStatusAsync.rejected, state => {
        state.statusInLoadingId = null;
      });

    // .addCase(deleteStatusAsync.pending, state => {
    //   // state.status = 'loading';
    // })
    // .addCase(deleteStatusAsync.fulfilled, (state, action) => {
    //   // state.status = 'idle';
    //   // state.items = action.payload;
    // })
    // .addCase(deleteStatusAsync.rejected, state => {
    //   // state.status = 'loading';
    // });
  },
});

export const { increment, decrement, incrementByAmount } = statusSlice.actions;

export const selectStatusList = (state: RootState) =>
  state.status.tempStatusList ?? state.status.statusList;
export const selectStatusInLoadingId = (state: RootState) =>
  state.status.statusInLoadingId;

export default statusSlice.reducer;
