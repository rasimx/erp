syntax = "proto3";

package erp;

service TransactionService {
    rpc CommitPreparedTransaction (PreparedTransaction) returns (TransactionResponse);
    rpc RollbackPreparedTransaction (PreparedTransaction) returns (TransactionResponse);
}

message PreparedTransaction {
    string transaction_id = 1;
}

message TransactionResponse {
    bool success = 1;
    optional string error = 2;
}

service ProductService {
    rpc Insert (InsertProductListRequest) returns (InsertProductListResponse);
    rpc FindManyBySku (FindManyBySkuRequest) returns (FindManyBySkuResponse);
}

message FindManyBySkuRequest {
    repeated string sku_list = 2;
}
message FindManyBySkuResponse {
    repeated Product items = 1;
}


message InsertProductListRequest {
    repeated ProductInsert items = 2;
    optional bool in_transaction = 3;
}

message InsertProductListResponse {
    repeated Product items = 1;
    optional string transaction_id = 2;
}

message ProductInsert {
    string sku = 2;
    string name = 3;
    uint32 width = 4; // в мм
    uint32 height = 5; // в мм
    uint32 length = 6; // в мм
    uint32 weight = 7; // в граммах
}

message Product {
    uint32 id = 1;
    string sku = 2;
    string name = 3;
    uint32 width = 4; // в мм
    uint32 height = 5; // в мм
    uint32 length = 6; // в мм
    uint32 weight = 7; // в граммах
}



service ProductBatchService {
    //    rpc ProductBatchListByProductId (ProductBatchListByProductIdRequest) returns (ProductBatchListResponse);
    //    rpc ProductBatchListById (ProductBatchListByIdRequest) returns (ProductBatchListResponse);
    //    rpc ProductBatchListFromId (ProductBatchListFromIdRequest) returns (ProductBatchListResponse);
    //    rpc ProductBatchListForLinkPostings (FindLatestRequest) returns (ProductBatchListResponse);
    rpc FindLatest (FindLatestRequest) returns (ProductBatchListResponse);
    //    rpc UpdatedProductBatchList (UpdatedProductBatchListRequest) returns (ProductBatchListResponse);
}

message ProductBatchListByProductIdRequest {
    repeated uint32 product_id_list = 1;
}

message ProductBatchListByIdRequest {
    repeated uint32 id_list = 1;
}
message ProductBatchListFromIdRequest {
    uint32 id = 1; // возвращает все id позже этого
}
message FindLatestRequest {
    optional uint32 product_id = 2;
    optional uint32 starter_id = 3; // возвращает все id позже этого, если указано, иначе последнюю партию
}

message UpdatedProductBatchListRequest {

}


message ProductBatchListItem {
    uint32 id = 1;
    uint32 product_id = 2;
    Product product = 3;
    uint32 count = 4;
    string date = 5;
}

message ProductBatchListResponse {
    repeated ProductBatchListItem items = 1;
}
