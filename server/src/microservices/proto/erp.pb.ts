// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.3
// source: erp.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "erp";

export interface PreparedTransaction {
  transactionId: string;
}

export interface TransactionResponse {
  success: boolean;
  error?: string | undefined;
}

export interface FindManyBySkuRequest {
  skuList: string[];
}

export interface FindManyBySkuResponse {
  items: Product[];
}

export interface InsertProductListRequest {
  items: ProductInsert[];
  inTransaction?: boolean | undefined;
}

export interface InsertProductListResponse {
  items: Product[];
  transactionId?: string | undefined;
}

export interface ProductInsert {
  sku: string;
  name: string;
  /** в мм */
  width: number;
  /** в мм */
  height: number;
  /** в мм */
  length: number;
  /** в граммах */
  weight: number;
}

export interface Product {
  id: number;
  sku: string;
  name: string;
  /** в мм */
  width: number;
  /** в мм */
  height: number;
  /** в мм */
  length: number;
  /** в граммах */
  weight: number;
}

export interface ProductBatchListByProductIdRequest {
  productIdList: number[];
}

export interface ProductBatchListByIdRequest {
  idList: number[];
}

export interface ProductBatchListFromIdRequest {
  /** возвращает все id позже этого */
  id: number;
}

export interface FindLatestRequest {
  productId?:
    | number
    | undefined;
  /** возвращает все id позже этого, если указано, иначе последнюю партию */
  starterId?: number | undefined;
}

export interface UpdatedProductBatchListRequest {
}

export interface ProductBatchListItem {
  id: number;
  productId: number;
  product: Product | undefined;
  count: number;
  date: string;
}

export interface ProductBatchListResponse {
  items: ProductBatchListItem[];
}

export const ERP_PACKAGE_NAME = "erp";

export interface TransactionServiceClient {
  commitPreparedTransaction(request: PreparedTransaction): Observable<TransactionResponse>;

  rollbackPreparedTransaction(request: PreparedTransaction): Observable<TransactionResponse>;
}

export interface TransactionServiceController {
  commitPreparedTransaction(
    request: PreparedTransaction,
  ): Promise<TransactionResponse> | Observable<TransactionResponse> | TransactionResponse;

  rollbackPreparedTransaction(
    request: PreparedTransaction,
  ): Promise<TransactionResponse> | Observable<TransactionResponse> | TransactionResponse;
}

export function TransactionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["commitPreparedTransaction", "rollbackPreparedTransaction"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRANSACTION_SERVICE_NAME = "TransactionService";

export interface ProductServiceClient {
  insert(request: InsertProductListRequest): Observable<InsertProductListResponse>;

  findManyBySku(request: FindManyBySkuRequest): Observable<FindManyBySkuResponse>;
}

export interface ProductServiceController {
  insert(
    request: InsertProductListRequest,
  ): Promise<InsertProductListResponse> | Observable<InsertProductListResponse> | InsertProductListResponse;

  findManyBySku(
    request: FindManyBySkuRequest,
  ): Promise<FindManyBySkuResponse> | Observable<FindManyBySkuResponse> | FindManyBySkuResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["insert", "findManyBySku"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";

export interface ProductBatchServiceClient {
  /**
   * rpc ProductBatchListByProductId (ProductBatchListByProductIdRequest) returns (ProductBatchListResponse);
   *    rpc ProductBatchListById (ProductBatchListByIdRequest) returns (ProductBatchListResponse);
   *    rpc ProductBatchListFromId (ProductBatchListFromIdRequest) returns (ProductBatchListResponse);
   *    rpc ProductBatchListForLinkPostings (FindLatestRequest) returns (ProductBatchListResponse);
   */

  findLatest(request: FindLatestRequest): Observable<ProductBatchListResponse>;
}

export interface ProductBatchServiceController {
  /**
   * rpc ProductBatchListByProductId (ProductBatchListByProductIdRequest) returns (ProductBatchListResponse);
   *    rpc ProductBatchListById (ProductBatchListByIdRequest) returns (ProductBatchListResponse);
   *    rpc ProductBatchListFromId (ProductBatchListFromIdRequest) returns (ProductBatchListResponse);
   *    rpc ProductBatchListForLinkPostings (FindLatestRequest) returns (ProductBatchListResponse);
   */

  findLatest(
    request: FindLatestRequest,
  ): Promise<ProductBatchListResponse> | Observable<ProductBatchListResponse> | ProductBatchListResponse;
}

export function ProductBatchServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findLatest"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductBatchService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductBatchService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_BATCH_SERVICE_NAME = "ProductBatchService";
