// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.25.3
// source: erp_ozon.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "erp_ozon";

export interface FullStateItem {
  sku: string;
  baseProductId?:
    | number
    | undefined;
  /** на складе (включая резерв) */
  presentQuantity: number;
  /** продано (за исключением отмен/возвратов и awaiting_packaging, может меняться) */
  soldQuantity: number;
}

export interface FullStateItemRequest {
}

export interface FullStateItemResponse {
  items: FullStateItem[];
}

export interface OzonProduct {
  sku: string;
  name: string;
  baseProductId?:
    | number
    | undefined;
  /** в мм */
  width: number;
  /** в мм */
  height: number;
  /** в мм */
  length: number;
  /** в граммах */
  weight: number;
}

export interface ProductListRequest {
  accountId: number;
  skuList: string[];
}

export interface ProductListResponse {
  items: OzonProduct[];
}

export interface RelinkPostingsItem {
  productBatchId: number;
  count: number;
  nextItems: RelinkPostingsItem[];
}

export interface RelinkPostingsRequest {
  items: RelinkPostingsItem[];
}

export interface RelinkPostingsResponse {
  success: boolean;
}

export const ERP_OZON_PACKAGE_NAME = "erp_ozon";

export interface StateServiceClient {
  setBaseProductIds(request: FullStateItemRequest): Observable<FullStateItemResponse>;

  currentFullState(request: FullStateItemRequest): Observable<FullStateItemResponse>;

  productList(request: ProductListRequest): Observable<ProductListResponse>;

  relinkPostings(request: RelinkPostingsRequest): Observable<RelinkPostingsResponse>;
}

export interface StateServiceController {
  setBaseProductIds(
    request: FullStateItemRequest,
  ): Promise<FullStateItemResponse> | Observable<FullStateItemResponse> | FullStateItemResponse;

  currentFullState(
    request: FullStateItemRequest,
  ): Promise<FullStateItemResponse> | Observable<FullStateItemResponse> | FullStateItemResponse;

  productList(
    request: ProductListRequest,
  ): Promise<ProductListResponse> | Observable<ProductListResponse> | ProductListResponse;

  relinkPostings(
    request: RelinkPostingsRequest,
  ): Promise<RelinkPostingsResponse> | Observable<RelinkPostingsResponse> | RelinkPostingsResponse;
}

export function StateServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["setBaseProductIds", "currentFullState", "productList", "relinkPostings"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StateService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StateService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STATE_SERVICE_NAME = "StateService";
