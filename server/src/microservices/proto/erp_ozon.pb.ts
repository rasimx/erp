// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.25.3
// source: erp_ozon.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "erp_ozon";

export interface FullStateItemRequest {
  storeId?: number | undefined;
  baseProductIds: number[];
}

export interface FullStateData {
  baseProductId: number;
  /** продано (за исключением отмен/возвратов и awaiting_packaging, может меняться) */
  salesCount: number;
  /** на складе (включая резерв) */
  inStoreCount: number;
  lastProductBatchId?: number | undefined;
}

export interface FullStateItem {
  storeId: number;
  items: FullStateData[];
}

export interface FullStateResponse {
  items: FullStateItem[];
}

export interface RelinkPostingsItem {
  productBatchId: number;
  count: number;
  nextItems: RelinkPostingsItem[];
}

export interface RelinkPostingsRequest {
  storeId: number;
  items: RelinkPostingsItem[];
}

export interface RelinkPostingsResponse {
  success: boolean;
}

export const ERP_OZON_PACKAGE_NAME = "erp_ozon";

export interface StateServiceClient {
  currentFullState(request: FullStateItemRequest, metadata?: Metadata): Observable<FullStateResponse>;

  relinkPostings(request: RelinkPostingsRequest, metadata?: Metadata): Observable<RelinkPostingsResponse>;
}

export interface StateServiceController {
  currentFullState(
    request: FullStateItemRequest,
    metadata?: Metadata,
  ): Promise<FullStateResponse> | Observable<FullStateResponse> | FullStateResponse;

  relinkPostings(
    request: RelinkPostingsRequest,
    metadata?: Metadata,
  ): Promise<RelinkPostingsResponse> | Observable<RelinkPostingsResponse> | RelinkPostingsResponse;
}

export function StateServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["currentFullState", "relinkPostings"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StateService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StateService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STATE_SERVICE_NAME = "StateService";
